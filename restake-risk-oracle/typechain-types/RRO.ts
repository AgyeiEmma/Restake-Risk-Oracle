/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RROInterface extends utils.Interface {
  functions: {
    "avsList(uint256)": FunctionFragment;
    "avsRegistry(string)": FunctionFragment;
    "depositToAVS(string,uint256)": FunctionFragment;
    "getAVSDetails(string)": FunctionFragment;
    "getAllAVSs()": FunctionFragment;
    "getRiskScore(string)": FunctionFragment;
    "getUserBalance(address,string)": FunctionFragment;
    "getUserPreferences(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "registerAVS(string,uint8)": FunctionFragment;
    "setTrustedBackend(address)": FunctionFragment;
    "setUserPreferences(uint8)": FunctionFragment;
    "triggerRebalance(address)": FunctionFragment;
    "trustedBackend()": FunctionFragment;
    "updateRiskScore(string,uint8)": FunctionFragment;
    "updateRiskScoreFromOracle(string,uint8)": FunctionFragment;
    "userBalances(address,string)": FunctionFragment;
    "userPreferences(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "avsList"
      | "avsRegistry"
      | "depositToAVS"
      | "getAVSDetails"
      | "getAllAVSs"
      | "getRiskScore"
      | "getUserBalance"
      | "getUserPreferences"
      | "owner"
      | "rebalance"
      | "registerAVS"
      | "setTrustedBackend"
      | "setUserPreferences"
      | "triggerRebalance"
      | "trustedBackend"
      | "updateRiskScore"
      | "updateRiskScoreFromOracle"
      | "userBalances"
      | "userPreferences"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "avsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "avsRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToAVS",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAVSDetails",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAVSs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPreferences",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAVS",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedBackend",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserPreferences",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerRebalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedBackend",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskScore",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRiskScoreFromOracle",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBalances",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPreferences",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "avsList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "avsRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAVSDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllAVSs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPreferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAVS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedBackend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserPreferences",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedBackend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRiskScoreFromOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPreferences",
    data: BytesLike
  ): Result;

  events: {
    "AVSRegistered(string,uint8)": EventFragment;
    "RebalanceTriggered(address)": EventFragment;
    "Rebalanced(address,string,string,uint256)": EventFragment;
    "RiskScoreUpdated(string,uint8)": EventFragment;
    "UserPrefsUpdated(address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AVSRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalanced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskScoreUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserPrefsUpdated"): EventFragment;
}

export interface AVSRegisteredEventObject {
  name: string;
  baseRiskScore: number;
}
export type AVSRegisteredEvent = TypedEvent<
  [string, number],
  AVSRegisteredEventObject
>;

export type AVSRegisteredEventFilter = TypedEventFilter<AVSRegisteredEvent>;

export interface RebalanceTriggeredEventObject {
  user: string;
}
export type RebalanceTriggeredEvent = TypedEvent<
  [string],
  RebalanceTriggeredEventObject
>;

export type RebalanceTriggeredEventFilter =
  TypedEventFilter<RebalanceTriggeredEvent>;

export interface RebalancedEventObject {
  user: string;
  fromAVS: string;
  toAVS: string;
  amount: BigNumber;
}
export type RebalancedEvent = TypedEvent<
  [string, string, string, BigNumber],
  RebalancedEventObject
>;

export type RebalancedEventFilter = TypedEventFilter<RebalancedEvent>;

export interface RiskScoreUpdatedEventObject {
  avsName: string;
  newRiskScore: number;
}
export type RiskScoreUpdatedEvent = TypedEvent<
  [string, number],
  RiskScoreUpdatedEventObject
>;

export type RiskScoreUpdatedEventFilter =
  TypedEventFilter<RiskScoreUpdatedEvent>;

export interface UserPrefsUpdatedEventObject {
  user: string;
  maxRiskScore: number;
}
export type UserPrefsUpdatedEvent = TypedEvent<
  [string, number],
  UserPrefsUpdatedEventObject
>;

export type UserPrefsUpdatedEventFilter =
  TypedEventFilter<UserPrefsUpdatedEvent>;

export interface RRO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RROInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    avsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    avsRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        name: string;
        baseRiskScore: number;
        exists: boolean;
      }
    >;

    depositToAVS(
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAVSDetails(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        avsName: string;
        baseRiskScore: number;
        exists: boolean;
      }
    >;

    getAllAVSs(overrides?: CallOverrides): Promise<[string[]]>;

    getRiskScore(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getUserBalance(
      user: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserPreferences(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerAVS(
      name: PromiseOrValue<string>,
      baseRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrustedBackend(
      backend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserPreferences(
      maxRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerRebalance(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trustedBackend(overrides?: CallOverrides): Promise<[string]>;

    updateRiskScore(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRiskScoreFromOracle(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userPreferences(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
    >;
  };

  avsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  avsRegistry(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean] & {
      name: string;
      baseRiskScore: number;
      exists: boolean;
    }
  >;

  depositToAVS(
    name: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAVSDetails(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean] & {
      avsName: string;
      baseRiskScore: number;
      exists: boolean;
    }
  >;

  getAllAVSs(overrides?: CallOverrides): Promise<string[]>;

  getRiskScore(
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  getUserBalance(
    user: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserPreferences(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerAVS(
    name: PromiseOrValue<string>,
    baseRiskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrustedBackend(
    backend: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserPreferences(
    maxRiskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerRebalance(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trustedBackend(overrides?: CallOverrides): Promise<string>;

  updateRiskScore(
    name: PromiseOrValue<string>,
    newRiskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRiskScoreFromOracle(
    name: PromiseOrValue<string>,
    newRiskScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBalances(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userPreferences(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
  >;

  callStatic: {
    avsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    avsRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        name: string;
        baseRiskScore: number;
        exists: boolean;
      }
    >;

    depositToAVS(
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAVSDetails(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean] & {
        avsName: string;
        baseRiskScore: number;
        exists: boolean;
      }
    >;

    getAllAVSs(overrides?: CallOverrides): Promise<string[]>;

    getRiskScore(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    getUserBalance(
      user: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPreferences(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<void>;

    registerAVS(
      name: PromiseOrValue<string>,
      baseRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrustedBackend(
      backend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserPreferences(
      maxRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerRebalance(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedBackend(overrides?: CallOverrides): Promise<string>;

    updateRiskScore(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRiskScoreFromOracle(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPreferences(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { maxRiskScore: number; autoRebalance: boolean }
    >;
  };

  filters: {
    "AVSRegistered(string,uint8)"(
      name?: null,
      baseRiskScore?: null
    ): AVSRegisteredEventFilter;
    AVSRegistered(name?: null, baseRiskScore?: null): AVSRegisteredEventFilter;

    "RebalanceTriggered(address)"(user?: null): RebalanceTriggeredEventFilter;
    RebalanceTriggered(user?: null): RebalanceTriggeredEventFilter;

    "Rebalanced(address,string,string,uint256)"(
      user?: null,
      fromAVS?: null,
      toAVS?: null,
      amount?: null
    ): RebalancedEventFilter;
    Rebalanced(
      user?: null,
      fromAVS?: null,
      toAVS?: null,
      amount?: null
    ): RebalancedEventFilter;

    "RiskScoreUpdated(string,uint8)"(
      avsName?: null,
      newRiskScore?: null
    ): RiskScoreUpdatedEventFilter;
    RiskScoreUpdated(
      avsName?: null,
      newRiskScore?: null
    ): RiskScoreUpdatedEventFilter;

    "UserPrefsUpdated(address,uint8)"(
      user?: null,
      maxRiskScore?: null
    ): UserPrefsUpdatedEventFilter;
    UserPrefsUpdated(
      user?: null,
      maxRiskScore?: null
    ): UserPrefsUpdatedEventFilter;
  };

  estimateGas: {
    avsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    avsRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositToAVS(
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAVSDetails(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAVSs(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskScore(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserBalance(
      user: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPreferences(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerAVS(
      name: PromiseOrValue<string>,
      baseRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrustedBackend(
      backend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserPreferences(
      maxRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerRebalance(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trustedBackend(overrides?: CallOverrides): Promise<BigNumber>;

    updateRiskScore(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRiskScoreFromOracle(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userPreferences(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    avsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    avsRegistry(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositToAVS(
      name: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAVSDetails(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAVSs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskScore(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserBalance(
      user: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPreferences(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerAVS(
      name: PromiseOrValue<string>,
      baseRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrustedBackend(
      backend: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserPreferences(
      maxRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerRebalance(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trustedBackend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateRiskScore(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRiskScoreFromOracle(
      name: PromiseOrValue<string>,
      newRiskScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBalances(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPreferences(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
